= Getting started =
== Prerequisites ==
To build scxmlcc, you will need:
 * The boost library
 * Basic build tools

On Ubuntu, install these with e.g. apt-get:
{{{
sudo apt-get install build-essential libboost-all-dev
}}}
== Optaining And Building scxmlcc ==
scxmlcc is available as compressed releases or directly using SVN. The latest and previous releases is available at [Download].

To optain scxmlCC using SVN, see the [https://code.google.com/p/scxmlcc/source/checkout Source] tab.

To build scxmlcc, simply execute make:
{{{
cd src
make
}}}
If you also want to build the examples:
{{{
cd examples
make
}}}
== The Examples ==
This sections describes the examples which can be found at src/examples.
=== Hello World ===
This is really not a practical state machine. It is just a simple expample for getting started with scxmlcc. This statechart is drawn in [https://code.google.com/p/scxmlgui/ scxmlgui], just two states connected with an unconditional transition. 

http://scxmlcc.googlecode.com/svn/wiki/img/hello.png

scxmlgui stores this as the following scxml:

{{{
<scxml initial="hello" version="0.9" xmlns="http://www.w3.org/2005/07/scxml">
 <state id="hello">
  <transition target="world"></transition>
 </state>
 <state id="world"></state>
</scxml>
}}}

This statechart can be compiled to an .h file using scxmlcc:
{{{
scxmlcc -o hello_world.h hello_world.scxml
}}}

This will generate hello_world.h which contains a sc_hello_world class implementing the statechart. For further detalis about this construct, see [Implementation].

Custom actions can be added to this statechart in C++ by specializing members in the sc_hello_world class. For example, consider the hello_world.cpp example which specializes the enter action on both states and instantiates the state machine:
{{{
#include "hello_world.h"
#include <iostream>

using namespace std;

typedef sc_hello_world sc;

template<> void sc::state_actions<sc::state_hello>::enter(sc::data_model &m)
{
	cout << "hello" << endl;	
}

template<> void sc::state_actions<sc::state_world>::enter(sc::data_model &m)
{
	cout << "world" << endl;	
}

int main(int argc, char *argv[])
{
	sc sc0;
	return 0;
}
}}}
As expected, this will output the hello world words:
{{{
hello
world
}}}
Note that, as stated on the [https://code.google.com/p/scxmlcc/ Home] page, no external libraries is nedded, and zero code is generated for the non specialized actions making it an efficient implementation.
=== Timer Switch ===
This example implements a simple timer switch:

http://scxmlcc.googlecode.com/svn/wiki/img/timer_switch.png
